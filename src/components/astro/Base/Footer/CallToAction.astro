---
import { getCollection } from "astro:content";
import { sortDate } from "@modules/collection";
import { trans } from "@modules/i18n";
import { SITE_DEFAULT_LOCALE } from "@consts";

import LinkTopRight from "@components/astro/Base/LinkTopRight.astro";

const locale = SITE_DEFAULT_LOCALE;
const pages = await getCollection("pages") ?? [];
const contactEntry = pages.filter(entry => entry.data?.displayContact).sort(sortDate).shift();

const {
    title = trans('contact.cta.title', locale),
    buttonText = trans('contact.cta.button', locale)
} = Astro.props;
---

{contactEntry
    ?   <div class="absolute size-full flex items-center justify-center">
            <div class="relative h-fit w-full text-center max-w-lg mx-auto mb-44 md:mb-52 lg:mb-72 lg:max-w-4xl">
                <span class="font-heading font-bold uppercase text-2xl md:text-3xl lg:text-5xl">{title ?? "Commencez avec nous aujourd'hui"}</span>
                <a
                    id="circle-wrapper"
                    href={contactEntry.data.permalink}
                    class="group absolute bottom-0 left-1/2 -translate-x-1/2 size-64 translate-y-[calc(100%-4rem)] p-12 cursor-pointer md:size-72 lg:size-[50rem] lg:translate-y-[calc(100%-20rem)] lg:p-16 lg:flex lg:items-center lg:justify-center lg:rounded-full"
                >
                    <div id="circle"class="relative size-full rounded-full bg-yama-accent/0 pointer-events-none ease-out overflow-hidden lg:size-64">
                        <div class="flex flex-col size-full items-center justify-center gap-y-2 after:size-56 after:rounded-full after:absolute after:top-0 after:left-0 after:z-[-1] after:bg-yama-accent after:blur-3xl after:opacity-100">
                            <LinkTopRight styles="size-8" strokeColor="stroke-yama-nav-items-color" />
                            <span class="text-sm text-yama-nav-items-color lg:text-base">{buttonText ?? "Nous contacter"}</span>
                        </div>
                    </div>
                </a>
            </div>
        </div>
    :   <div class="absolute inset-0 top-1/2 -translate-y-full h-fit font-heading font-bold uppercase text-2xl max-w-4xl text-center mx-auto px-4">
            {trans('contact.homepage.required', locale) ?? "Veuillez ajouter une page avec un formulaire de contact !"}
        </div>
}

<script>
    const circleWrapper = document.getElementById('circle-wrapper');
    const circle = document.getElementById('circle');

    type MagnetiseOptions = {
        wrapper: HTMLElement,
        target: HTMLElement,
        xForce: number,
        yForce: number,
        transitionDuration: number
    }

    const defaultOptions = {
        wrapper: circleWrapper,
        target: circle,
        xForce: 4.5,
        yForce: 4.5,
        transitionDuration: 2000
    }

    const magnetise = (e, options: MagnetiseOptions = defaultOptions) => {
        const mouseX = e.clientX - (options.wrapper.getBoundingClientRect().x) - options.wrapper.getBoundingClientRect().width / 2;
        const mouseY = e.clientY - (options.wrapper.getBoundingClientRect().y) - options.wrapper.getBoundingClientRect().height / 2;
        options.target.style.transitionDuration = `${options.transitionDuration}ms`;
        options.target.style.transform = `translate3d(${mouseX / options.xForce}px, ${mouseY / options.yForce}px, 0)`;
    }

    const resetPosition = (target) => target.style.transform = `translate3d(0, 0, 0)`;

    const observe = (wrapper, target) => {
        wrapper.addEventListener('mouseenter', () => window.addEventListener('mousemove', magnetise));
        wrapper.addEventListener('mouseleave', () => {
            resetPosition(target);
            window.removeEventListener('mousemove', magnetise);
        });
    }

    if (circleWrapper) {
        observe(circleWrapper, circle);
    }


</script>
